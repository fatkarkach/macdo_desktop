/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.aldrin.cafsys.gui.panel;

import com.aldrin.cafsys.events.ActionListenerHandler;
import com.aldrin.cafsys.gui.JFrameCafSys;
import com.aldrin.cafsys.gui.dialog.JDialogPayment;
import com.aldrin.cafsys.gui.dialog.au.db.AppQuery;
import com.aldrin.cafsys.model.Category;
import com.aldrin.cafsys.model.MOTD;
import com.aldrin.cafsys.model.Menu;
import com.aldrin.cafsys.model.TakingMeals;
import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.sql.Blob;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Java Programming with Aldrin
 */

public class JPanelCashier extends javax.swing.JPanel implements MouseListener, ActionListener {

    /**
     * Creates new form JPanelCashier
     */
    private AppQuery query = new AppQuery();
    private static Integer categoryId;
    private DecimalFormat df = new DecimalFormat("##,##0.00");
    private MOTD motd = new MOTD();
    private static boolean multipleOrder = false;
    private JFrameCafSys mainJFrame;
    private Component selectedComponent;
    private double totalAmount = 0;
    private static Boolean payment = false;
    private static Double cash = 0.0;
    private static Double change;
    private static Integer customerNo = 0;
    private static com.aldrin.cafsys.model.Discount discount;
    private static Double totalDiscount;
    private static Boolean removeMenu = false;
    private static TakingMeals takingMeals;
    private static Integer tableNo;

    public JPanelCashier() {
        initComponents();
        selectCategory();
        setTable();
        clickTable();
        jButtonEditQty.setEnabled(false);
        jButtonRemoveQty.setEnabled(false);
        jButtonNew.setEnabled(false);
        jButtonHold.setEnabled(false);
        jButtonPayment.setEnabled(false);
        autoCalulateTable();

    }

    public JPanelCashier(Integer categoryId) {
        //click category to add menu
        this.validate();
        this.removeMenu = false;
        initComponents();
        setCategoryId(categoryId);
        new JFrameCafSys(this);
        setTable();

    }

    public JPanelCashier(MOTD motd) {
        this.setMotd(motd);
        this.validate();
        initComponents();
        new JFrameCafSys(this, motd);
    }

    public JPanelCashier(com.aldrin.cafsys.gui.JFrameCafSys parent) {
        this.mainJFrame = parent;
    }

    public JPanelCashier(boolean removeMenu) {
        //click category to add menu
        this.validate();
        initComponents();
        new JFrameCafSys(this, removeMenu);
        setTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jButtonNew = new javax.swing.JButton();
        jButtonHold = new javax.swing.JButton();
        jButtonPayment = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabelItemsCounter = new javax.swing.JLabel();
        jLabelTableNo = new javax.swing.JLabel();
        jLabelTakingMeals = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabelCash = new javax.swing.JLabel();
        jLabelChange = new javax.swing.JLabel();
        jLabelAmountDueTotal = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButtonRemoveQty = new javax.swing.JButton();
        jButtonEditQty = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jButtonMinus = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanelShowMenu = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanelShowCategories = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();

        setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(153, 153, 153)));
        setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 102, 153)), "Orders", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Courier New", 0, 24), new java.awt.Color(0, 102, 153))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(464, 400));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel11.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 0, 0, new java.awt.Color(102, 102, 102)));
        jPanel11.setPreferredSize(new java.awt.Dimension(292, 80));
        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 80, 15));

        jButtonNew.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jButtonNew.setForeground(new java.awt.Color(0, 102, 153));
        jButtonNew.setMnemonic('N');
        jButtonNew.setText("New");
        jButtonNew.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonNew.setPreferredSize(new java.awt.Dimension(150, 50));
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });
        jPanel11.add(jButtonNew);

        jButtonHold.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jButtonHold.setForeground(new java.awt.Color(0, 102, 153));
        jButtonHold.setMnemonic('H');
        jButtonHold.setText("Hold");
        jButtonHold.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonHold.setPreferredSize(new java.awt.Dimension(150, 50));
        jButtonHold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHoldActionPerformed(evt);
            }
        });
        jPanel11.add(jButtonHold);

        jButtonPayment.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jButtonPayment.setForeground(new java.awt.Color(0, 102, 153));
        jButtonPayment.setMnemonic('P');
        jButtonPayment.setText("Pay");
        jButtonPayment.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonPayment.setPreferredSize(new java.awt.Dimension(150, 50));
        jButtonPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPaymentActionPerformed(evt);
            }
        });
        jPanel11.add(jButtonPayment);

        jPanel1.add(jPanel11, java.awt.BorderLayout.SOUTH);

        jPanel13.setLayout(new java.awt.BorderLayout());

        jPanel19.setLayout(new java.awt.BorderLayout());

        jPanel10.setLayout(new java.awt.BorderLayout());

        jPanel20.setPreferredSize(new java.awt.Dimension(660, 150));
        jPanel20.setLayout(new java.awt.BorderLayout());

        jPanel22.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel12.setFont(new java.awt.Font("Stencil", 1, 24)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(102, 102, 102));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Table No:");
        jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel22.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 180, 30));

        jLabel13.setFont(new java.awt.Font("Stencil", 1, 36)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(102, 102, 102));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Items:");
        jLabel13.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel22.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 180, 70));

        jLabel14.setFont(new java.awt.Font("Stencil", 1, 24)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(102, 102, 102));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Taking:");
        jLabel14.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel22.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 180, 40));

        jLabelItemsCounter.setFont(new java.awt.Font("Courier New", 1, 30)); // NOI18N
        jLabelItemsCounter.setForeground(new java.awt.Color(102, 102, 102));
        jLabelItemsCounter.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelItemsCounter.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel22.add(jLabelItemsCounter, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 170, 70));

        jLabelTableNo.setFont(new java.awt.Font("Courier New", 1, 30)); // NOI18N
        jLabelTableNo.setForeground(new java.awt.Color(102, 102, 102));
        jLabelTableNo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelTableNo.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel22.add(jLabelTableNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 70, 170, 50));

        jLabelTakingMeals.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        jLabelTakingMeals.setForeground(new java.awt.Color(102, 102, 102));
        jLabelTakingMeals.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelTakingMeals.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel22.add(jLabelTakingMeals, new org.netbeans.lib.awtextra.AbsoluteConstraints(195, 110, 170, 40));

        jPanel20.add(jPanel22, java.awt.BorderLayout.CENTER);

        jPanel23.setPreferredSize(new java.awt.Dimension(420, 150));
        jPanel23.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Stencil", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Change:");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel23.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 130, 30));

        jLabel10.setFont(new java.awt.Font("Stencil", 1, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(102, 102, 102));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Total:");
        jLabel10.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel23.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 140, 70));

        jLabel11.setFont(new java.awt.Font("Stencil", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(102, 102, 102));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Cash:");
        jLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel23.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 130, 20));

        jLabelCash.setFont(new java.awt.Font("Courier New", 1, 30)); // NOI18N
        jLabelCash.setForeground(new java.awt.Color(102, 102, 102));
        jLabelCash.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelCash.setText("100,000.00");
        jPanel23.add(jLabelCash, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 200, 40));

        jLabelChange.setFont(new java.awt.Font("Courier New", 1, 30)); // NOI18N
        jLabelChange.setForeground(new java.awt.Color(102, 102, 102));
        jLabelChange.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelChange.setText("5,999.99");
        jPanel23.add(jLabelChange, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, 200, 40));

        jLabelAmountDueTotal.setBackground(new java.awt.Color(51, 51, 51));
        jLabelAmountDueTotal.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 34)); // NOI18N
        jLabelAmountDueTotal.setForeground(new java.awt.Color(102, 102, 102));
        jLabelAmountDueTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelAmountDueTotal.setText("99,111.00");
        jPanel23.add(jLabelAmountDueTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 200, 60));

        jPanel20.add(jPanel23, java.awt.BorderLayout.EAST);

        jPanel10.add(jPanel20, java.awt.BorderLayout.SOUTH);

        jPanel21.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jPanel21.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel2.setPreferredSize(new java.awt.Dimension(80, 365));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 40));

        jButtonRemoveQty.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonRemoveQty.setText("Remove");
        jButtonRemoveQty.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonRemoveQty.setPreferredSize(new java.awt.Dimension(65, 50));
        jButtonRemoveQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveQtyActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonRemoveQty);

        jButtonEditQty.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonEditQty.setText("Edit");
        jButtonEditQty.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonEditQty.setPreferredSize(new java.awt.Dimension(65, 50));
        jButtonEditQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditQtyActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonEditQty);

        jButtonAdd.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButtonAdd.setText("+");
        jButtonAdd.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonAdd.setPreferredSize(new java.awt.Dimension(65, 50));
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonAdd);

        jButtonMinus.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButtonMinus.setText("-");
        jButtonMinus.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonMinus.setPreferredSize(new java.awt.Dimension(65, 50));
        jButtonMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMinusActionPerformed(evt);
            }
        });
        jPanel2.add(jButtonMinus);

        jPanel21.add(jPanel2, java.awt.BorderLayout.EAST);

        jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(102, 102, 102)));
        jPanel3.setPreferredSize(new java.awt.Dimension(785, 10));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 789, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );

        jPanel21.add(jPanel3, java.awt.BorderLayout.SOUTH);

        jPanel14.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 0, 0, new java.awt.Color(102, 102, 102)));
        jPanel14.setPreferredSize(new java.awt.Dimension(785, 5));

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 789, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 3, Short.MAX_VALUE)
        );

        jPanel21.add(jPanel14, java.awt.BorderLayout.NORTH);

        jPanel10.add(jPanel21, java.awt.BorderLayout.CENTER);

        jPanel19.add(jPanel10, java.awt.BorderLayout.CENTER);

        jPanel13.add(jPanel19, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel13, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel4.setPreferredSize(new java.awt.Dimension(600, 484));
        jPanel4.setLayout(new java.awt.BorderLayout(10, 10));

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 153), 1, true), "Menu", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Courier New", 0, 24), new java.awt.Color(0, 102, 153))); // NOI18N
        jPanel12.setLayout(new java.awt.BorderLayout());

        jPanelShowMenu.setPreferredSize(new java.awt.Dimension(594, 1000));
        jPanelShowMenu.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 10));
        jScrollPane3.setViewportView(jPanelShowMenu);

        jPanel12.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel12, java.awt.BorderLayout.CENTER);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 153), 1, true), "Food Categories", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Courier New", 0, 24), new java.awt.Color(0, 102, 153))); // NOI18N
        jPanel5.setMaximumSize(new java.awt.Dimension(602, 202));
        jPanel5.setMinimumSize(new java.awt.Dimension(602, 202));
        jPanel5.setPreferredSize(new java.awt.Dimension(602, 250));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setMinimumSize(new java.awt.Dimension(30, 23));

        jPanelShowCategories.setPreferredSize(new java.awt.Dimension(600, 400));
        jPanelShowCategories.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 10));
        jScrollPane1.setViewportView(jPanelShowCategories);

        jPanel5.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel5, java.awt.BorderLayout.NORTH);

        jPanel6.add(jPanel4, java.awt.BorderLayout.EAST);

        add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel7.setPreferredSize(new java.awt.Dimension(10, 479));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 718, Short.MAX_VALUE)
        );

        add(jPanel7, java.awt.BorderLayout.WEST);

        jPanel8.setPreferredSize(new java.awt.Dimension(10, 479));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 718, Short.MAX_VALUE)
        );

        add(jPanel8, java.awt.BorderLayout.EAST);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1419, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        add(jPanel9, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEditQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditQtyActionPerformed
        editQty();
        autoCalulateTable();
    }//GEN-LAST:event_jButtonEditQtyActionPerformed

    private void jButtonPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPaymentActionPerformed
        JDialogPayment payment = new JDialogPayment(getMainJFrame(), true, getTotalAmount());
        payment.setVisible(true);
        if (getPayment() == true) {
            com.aldrin.cafsys.model.Invoice invoice = new com.aldrin.cafsys.model.Invoice();
            com.aldrin.cafsys.model.Order order = new com.aldrin.cafsys.model.Order();
            com.aldrin.cafsys.model.MOTD motd = new com.aldrin.cafsys.model.MOTD();
            //Invoice set input
            invoice.setCustomerNo(getCustomerNo().toString());
            invoice.setCustomerCash(getCash());
            invoice.setTableNo(getTableNo());
            invoice.setTakingMealsId(takingMeals.getId());
            query.addInvoice(invoice);
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                Integer motdId = (Integer) jTable1.getValueAt(i, 0);
                Integer qty = (Integer) jTable1.getValueAt(i, 2);
                motd.setId(motdId);
                order.setMotd(motd);
                order.setQty(qty);
                query.addOrder(order);
            }
            jButtonHold.setEnabled(false);
            jButtonPayment.setEnabled(false);
            jLabelCash.setText(df.format(getCash()).toString());
            jLabelChange.setText(df.format(getChange()));
            jLabelAmountDueTotal.setText(String.valueOf(df.format(getCash() - getChange())));
            jLabelItemsCounter.setText(String.valueOf(jTable1.getRowCount()));
            jLabelTableNo.setText(String.valueOf(getTableNo()));
            jLabelTakingMeals.setText(takingMeals.getTakingMeals());
            setRemoveMenu(true);
            new JPanelCashier(true);
        }
        if (jButtonHold.getText().equals("Release")) {
            jButtonHold.setEnabled(true);
        }

    }//GEN-LAST:event_jButtonPaymentActionPerformed

    private void jButtonHoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHoldActionPerformed
        if (jButtonHold.getText().equals("Hold")) {
            new JPanelCashier("Hold");
            jButtonRemoveQty.setEnabled(false);
            jButtonEditQty.setEnabled(false);
            jButtonAdd.setEnabled(false);
            jButtonMinus.setEnabled(false);
        } else {
            new JPanelCashier("Release");
        }
    }//GEN-LAST:event_jButtonHoldActionPerformed

    private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
        int response = JOptionPane.showConfirmDialog(mainJFrame, "Are you sure to create new order?", "New order confirmation", JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION) {
            tableModel.setRowCount(0);
            jLabelCash.setText("");
            jLabelChange.setText("");
            jLabelAmountDueTotal.setText("");
            jLabelItemsCounter.setText("");
            jLabelTableNo.setText("");
            jLabelTakingMeals.setText("");
            jButtonRemoveQty.setEnabled(false);
            jButtonEditQty.setEnabled(false);
            jButtonAdd.setEnabled(false);
            jButtonMinus.setEnabled(false);
            jButtonPayment.setEnabled(false);
            autoCalulateTable();
            if (jButtonHold.getText().equals("Release")) {
                jButtonHold.setEnabled(true);
            } else {
                jButtonHold.setEnabled(false);
            }
            setRemoveMenu(true);
            new JPanelCashier(true);
            JOptionPane.showConfirmDialog(mainJFrame, "Creating new order.", "Message", JOptionPane.PLAIN_MESSAGE);
        }


    }//GEN-LAST:event_jButtonNewActionPerformed

    private void jButtonRemoveQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveQtyActionPerformed
        removeMenu();
        autoCalulateTable();
        if (jTable1.getRowCount() == 0) {
            jButtonPayment.setEnabled(false);
            jButtonHold.setEnabled(false);
            jButtonNew.setEnabled(false);
            jButtonAdd.setEnabled(false);
            jButtonMinus.setEnabled(false);
            jLabelAmountDueTotal.setText("");
            jLabelItemsCounter.setText("");
        } else {
            jButtonPayment.setEnabled(true);
            jButtonHold.setEnabled(true);
            jButtonNew.setEnabled(true);
            jButtonAdd.setEnabled(false);
            jButtonMinus.setEnabled(false);
        }
    }//GEN-LAST:event_jButtonRemoveQtyActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        try {
            Integer cQrty = 0;
            int selected = jTable1.getSelectedRow();
            Object qty = jTable1.getValueAt(selected, 2);
            int pcs = (int) qty;
            Object purchasePrice = jTable1.getValueAt(selected, 6);
            float sum = 0.0f;
            cQrty = pcs + 1;
            float purchaseP = Float.parseFloat(purchasePrice.toString());
            sum = purchaseP * (float) cQrty;

            jTable1.setValueAt(df.format(sum), selected, 4);
            jTable1.setValueAt(sum, selected, 5);
            jTable1.setValueAt(cQrty, selected, 2);
            jButtonEditQty.setEnabled(false);
            jButtonRemoveQty.setEnabled(false);
            jButtonAdd.setEnabled(false);
            jButtonMinus.setEnabled(false);
        } catch (NumberFormatException e) {
            e.printStackTrace();
            return;
        }
        autoCalulateTable();
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMinusActionPerformed
        try {
            Integer cQrty = 0;
            int selected = jTable1.getSelectedRow();
            Object qty = jTable1.getValueAt(selected, 2);
            int pcs = (int) qty;
            Object purchasePrice = jTable1.getValueAt(selected, 6);
            float sum = 0.0f;
            cQrty = pcs - 1;
            float purchaseP = Float.parseFloat(purchasePrice.toString());
            sum = purchaseP * (float) cQrty;
            if (cQrty == 0) {
                jButtonRemoveQty.setEnabled(true);
                JOptionPane.showMessageDialog(mainJFrame, "Quantity is one, just click remove button if you want to remove item.", "Warning, quantity is one!!", JOptionPane.PLAIN_MESSAGE);
            } else {
                jTable1.setValueAt(df.format(sum), selected, 4);
                jTable1.setValueAt(sum, selected, 5);
                jTable1.setValueAt(cQrty, selected, 2);
                jButtonEditQty.setEnabled(false);
                jButtonRemoveQty.setEnabled(false);
                jButtonAdd.setEnabled(false);
                jButtonMinus.setEnabled(false);
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
            return;
        }
        autoCalulateTable();
    }//GEN-LAST:event_jButtonMinusActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonEditQty;
    private javax.swing.JButton jButtonHold;
    private javax.swing.JButton jButtonMinus;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JButton jButtonPayment;
    private javax.swing.JButton jButtonRemoveQty;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelAmountDueTotal;
    private javax.swing.JLabel jLabelCash;
    private javax.swing.JLabel jLabelChange;
    private javax.swing.JLabel jLabelItemsCounter;
    private javax.swing.JLabel jLabelTableNo;
    private javax.swing.JLabel jLabelTakingMeals;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    public javax.swing.JPanel jPanelShowCategories;
    public javax.swing.JPanel jPanelShowMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    private ArrayList<com.aldrin.cafsys.model.Category> categoryList;
    private LinkedList<com.aldrin.cafsys.model.MOTD> motdList;
    private Integer menuId;

    public void selectCategory() {
        categoryList = query.getCategoryOfTheDay();
        jPanelShowCategories.removeAll();
        jPanelShowCategories.updateUI();
        for (Category c : categoryList) {
            JButton jButtonCategory = new JButton();
            jButtonCategory.setText(String.valueOf(c.getCategory()));
            jButtonCategory.setPreferredSize(new java.awt.Dimension(120, 60));
            jButtonCategory.addActionListener(new ActionListenerHandler(categoryList));
            setCategoryId(c.getId());
            if (mainJFrame.isLogIn() == false) {
                jButtonCategory.setEnabled(false);
            } else {
                jButtonCategory.setEnabled(true);
            }
            jButtonCategory.setMargin(new java.awt.Insets(2, 2, 2, 2));
            jButtonCategory.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            jPanelShowCategories.add(jButtonCategory);
        }

    }

    public void selectMenu() {
        if (getRemoveMenu() == true) {
            motdList = null;
            jPanelShowMenu.removeAll();
            return;
        } else {
            motdList = query.getMenuByCategoryIdMenuId(getCategoryId());
            jPanelShowMenu.removeAll();
            jPanelShowMenu.updateUI();
            for (MOTD motd : motdList) {
                Menu menu = new Menu();
                menu.setId(motd.getMenuId());
                JButton jButtonMenuOTD = new JButton();
                jButtonMenuOTD.setPreferredSize(new java.awt.Dimension(130, 125));
                if (displayPicture(menu) == null) {
                } else {
                    jButtonMenuOTD.setIcon(new javax.swing.ImageIcon(displayPicture(menu)));
                }
                jButtonMenuOTD.setName(String.valueOf(motd.getId()));
                jButtonMenuOTD.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                jButtonMenuOTD.setText("<html><body style =\"text-indent: -2em;\"><p style=\"font-size: 10; color:red;\">" + motd.getMenu() + "</p><p  style=\"font-weight: 50%; color:blue;\">" + df.format(motd.getPrice()) + "</p></body></html>");
                jButtonMenuOTD.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                jButtonMenuOTD.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                jButtonMenuOTD.addActionListener(new ActionListenerHandler(jButtonMenuOTD, motdList));
                jButtonMenuOTD.setMargin(new java.awt.Insets(2, 2, 2, 2));
                jButtonMenuOTD.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                if (mainJFrame.isLogIn() == false) {
                    jButtonMenuOTD.setEnabled(false);
                    jPanelShowMenu.removeAll();
                } else {
                    jButtonMenuOTD.setEnabled(true);
                    jPanelShowMenu.add(jButtonMenuOTD);

                }

            }
        }
    }

    /**
     * @return the categoryId
     */
    public static Integer getCategoryId() {
        return categoryId;
    }

    /**
     * @param aCategoryId the categoryId to set
     */
    public static void setCategoryId(Integer aCategoryId) {
        categoryId = aCategoryId;
    }

    private BufferedImage displayPicture(Menu menu) {
        BufferedImage bf = null;
        try {
            Blob blobImage = (Blob) query.selectedMenuPicture(menu);
            if (blobImage == null) {

            } else {
                ImageIcon icon = new ImageIcon(blobImage.getBytes(1L, (int) blobImage.length()));

                Image image = icon.getImage();

                int IMG_WIDTH = 150;
                int IMG_HEIGHT = 90;
                int type = BufferedImage.TYPE_INT_ARGB;

                BufferedImage resizedImage = new BufferedImage(IMG_WIDTH, IMG_HEIGHT, type);
                Graphics2D g = resizedImage.createGraphics();
                g.drawImage(image, 0, 0, IMG_WIDTH, IMG_HEIGHT, null);
                g.dispose();
                g.setComposite(AlphaComposite.Src);

                g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                        RenderingHints.VALUE_INTERPOLATION_BILINEAR);
                g.setRenderingHint(RenderingHints.KEY_RENDERING,
                        RenderingHints.VALUE_RENDER_QUALITY);
                g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                        RenderingHints.VALUE_ANTIALIAS_ON);
                bf = resizedImage;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return bf;
    }

    public DefaultTableModel tableModel = new DefaultTableModel() {
        public Class getColumnClass(int columnIndex) {
            if (columnIndex == 0) {
                return String.class;
            }
            switch (columnIndex) {
                case 1:
                    return String.class;
                case 2:
                    return Integer.class;
                case 3:
                    return Integer.class;
                case 4:
                    return Integer.class;
                default:
                    return String.class;
            }
        }

        public boolean isCellEditable(int row, int col) {
            if (col < 10) {
                return false;

            } else {
                return true;
            }
        }
    };
    private TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(tableModel);

    private void setTable() {
        try {
            String[] columnNames = {
                "Id",//
                "Menu",
                "Qty",
                "<html><center>Each<br>Price</center></html>",
                "<html><center>Line<br>Total</center></html>",
                "Line Total UF",
                "Price UF"//6
            };//15

            jTable1 = new JTable(tableModel);
            JTableHeader header = jTable1.getTableHeader();
            header.setPreferredSize(new Dimension(100, 45));
            header.setFont(new Font("Courier New", Font.PLAIN, 16));
            header.setBackground(new java.awt.Color(0, 102, 153));
            header.setForeground(Color.white);
            jTable1.setRowSorter(sorter);
            jTable1.addMouseListener(this);
            jTable1.setRowHeight(30);
            jTable1.setFont(new Font("Courier New", Font.PLAIN, 18));
            jScrollPane2.setViewportView(jTable1);
            for (int i = 0; i < columnNames.length;) {
                tableModel.addColumn(columnNames[i]);
                i++;
            }
            jScrollPane2.setViewportView(jTable1);

            TableColumn[] column = new TableColumn[100];

            column[0] = jTable1.getColumnModel().getColumn(0);
            column[0].setPreferredWidth(40);

            column[1] = jTable1.getColumnModel().getColumn(1);
            column[1].setPreferredWidth(280);

            column[2] = jTable1.getColumnModel().getColumn(2);
            column[2].setPreferredWidth(50);

            TableColumn hidden1 = jTable1.getColumnModel().getColumn(0);
            hidden1.setMinWidth(0);
            hidden1.setPreferredWidth(0);
            hidden1.setMaxWidth(0);
            TableColumn hidden2 = jTable1.getColumnModel().getColumn(5);
            hidden2.setMinWidth(0);
            hidden2.setPreferredWidth(0);
            hidden2.setMaxWidth(0);
            TableColumn hidden3 = jTable1.getColumnModel().getColumn(6);
            hidden3.setMinWidth(0);
            hidden3.setPreferredWidth(0);
            hidden3.setMaxWidth(0);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    @Override
    public void mouseClicked(MouseEvent e) {
        if (e.getSource() == jTable1) {
            if (e.getButton() == MouseEvent.BUTTON1) {
                if (e.getClickCount() == 1) {
                    int row = jTable1.getSelectedRow();
                    if (row != -1) {
                        Object idl = jTable1.getValueAt(row, 0);
                        Object categoryIdl = jTable1.getValueAt(row, 2);
                        Object menul = jTable1.getValueAt(row, 1);
                        Object pricel = jTable1.getValueAt(row, 3);
                        Category c = new Category();
                        c.setId(Integer.parseInt(categoryIdl.toString()));
                        jButtonEditQty.setEnabled(true);
                        jButtonRemoveQty.setEnabled(true);
                        jButtonAdd.setEnabled(true);
                        jButtonMinus.setEnabled(true);
                    }
                }
            }
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    /**
     * @return the menuId
     */
    public Integer getMenuId() {
        return menuId;
    }

    /**
     * @param menuId the menuId to set
     */
    public void setMenuId(Integer menuId) {
        this.menuId = menuId;
    }

    public void addOrderToTable(com.aldrin.cafsys.model.MOTD motd) {
        try {

            MOTD m = query.addOrderToTable(motd);
            if (jTable1.getRowCount() == 0) {
                tableModel.addRow(new Object[]{m.getId(), m.getMenu(), 1, df.format(m.getPrice()), df.format(m.getPrice()), m.getPrice(), m.getPrice()});
                jButtonNew.setEnabled(true);
                jButtonHold.setEnabled(true);
                jButtonPayment.setEnabled(true);
                return;
            } else {
                int sum = 0;
                for (int i = 0; i < jTable1.getRowCount(); i++) {
                    Object productIdl = jTable1.getValueAt(i, 0);
                    int producId = Integer.parseInt(productIdl.toString());
                    if (producId == motd.getId()) {
                        //edit quantity
                        Object qtyFirstl = jTable1.getValueAt(i, 2);
                        int qty = Integer.parseInt(qtyFirstl.toString());
                        sum = qty + 1;
                        jTable1.setValueAt(sum, i, 2);
                        jTable1.setValueAt(df.format(sum * m.getPrice()), i, 4);
                        jTable1.setValueAt(sum * m.getPrice(), i, 5);
                        setMultipleOrder(true);

                    }
                }
                if (isMultipleOrder() == false) {
                    tableModel.addRow(new Object[]{m.getId(), m.getMenu(), 1, df.format(m.getPrice()), df.format(m.getPrice()), m.getPrice(), m.getPrice()});
                }
            }

            setMultipleOrder(false);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @return the motd
     */
    public MOTD getMotd() {
        return motd;
    }

    /**
     * @param motd the motd to set
     */
    public void setMotd(MOTD motd) {
        this.motd = motd;
    }

    /**
     * @return the multipleOrder
     */
    public static boolean isMultipleOrder() {
        return multipleOrder;
    }

    /**
     * @param aMultipleOrder the multipleOrder to set
     */
    public static void setMultipleOrder(boolean aMultipleOrder) {
        multipleOrder = aMultipleOrder;
    }

    private void removeMenu() {
        try {
            if (jTable1.getRowCount() == 0) {
                jButtonPayment.setEnabled(false);
                return;
            }
            int numRows = jTable1.getSelectedRows().length;
            if (numRows == 0) {
                return;
            }
            for (int i = 0; i < numRows; i++) {
                tableModel.removeRow(jTable1.getSelectedRow());
            }
            jButtonRemoveQty.setEnabled(false);
            jButtonEditQty.setEnabled(false);
            jButtonNew.setEnabled(false);

        } catch (Exception e) {

        }
    }

    private void editQty() {
        try {
            int selected = jTable1.getSelectedRow();
            Object qty = jTable1.getValueAt(selected, 2);
            int pcs = (int) qty;
            String q = JOptionPane.showInputDialog(getMainJFrame(), "Change the quantity in text", pcs);
            int qty1 = 0;

            if (q != null) {
                qty1 = Integer.parseInt(q);
            } else {
                qty1 = pcs;
            }
            if (qty1 == 0) {
                JOptionPane.showMessageDialog(selectedComponent, "Invalid input!!", "Warning message!!", JOptionPane.WARNING_MESSAGE);
                return;
            }

            Object purchasePrice = jTable1.getValueAt(selected, 6);
            float sum = 0.0f;
            float purchaseP = Float.parseFloat(purchasePrice.toString());
            sum = purchaseP * (float) qty1;
            jTable1.setValueAt(df.format(sum), selected, 4);
            jTable1.setValueAt(sum, selected, 5);
            jTable1.setValueAt(qty1, selected, 2);
            if (tableModel.getRowCount() < 1) {
                jButtonEditQty.setEnabled(false);
//                jButtonPayment.setEnabled(false);
                jButtonRemoveQty.setEnabled(false);
            }
            jButtonEditQty.setEnabled(false);
            jButtonRemoveQty.setEnabled(false);
            jButtonAdd.setEnabled(false);
            jButtonMinus.setEnabled(false);
//            autoCalulateTable();
        } catch (NumberFormatException e) {
            e.printStackTrace();
            return;
        }
    }

    /**
     * @return the mainJFrame
     */
    public JFrameCafSys getMainJFrame() {
        return mainJFrame;
    }

    /**
     * @param mainJFrame the mainJFrame to set
     */
    public void setMainJFrame(JFrameCafSys mainJFrame) {
        this.mainJFrame = mainJFrame;
    }

    private JMenuItem makeMenuItem(String label) {
        JMenuItem item = new JMenuItem(label);
        item.addActionListener(this);
        return item;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String color = e.getActionCommand();

        if (color.equals("Remove Menu")) {
            removeMenu();
            autoCalulateTable();
        } else if (color.equals("Edit Quantity")) {
            editQty();
            autoCalulateTable();
        } else if (color.equals("New Transaction")) {
            tableModel.setRowCount(0);
            autoCalulateTable();
        }

    }

    public void clickTable() {
        final JPopupMenu colorMenu = new JPopupMenu("Table Menu");
        colorMenu.add(makeMenuItem("Remove Menu"));
        colorMenu.add(makeMenuItem("Edit Quantity"));
        colorMenu.add(makeMenuItem("New Transaction"));

        MouseListener mouseListener = new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                checkPopup(e);
            }

            public void mouseClicked(MouseEvent e) {
                checkPopup(e);
            }

            public void mouseReleased(MouseEvent e) {
                checkPopup(e);
            }

            private void checkPopup(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    selectedComponent = e.getComponent();
                    colorMenu.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        };
        jTable1.addMouseListener(mouseListener);
    }

    public void autoCalulateTable() {
        try {
            setTotalAmount(0);
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                double lineTotal = Double.parseDouble(jTable1.getValueAt(i, 5).toString());
                setTotalAmount(getTotalAmount() + lineTotal);
                jLabelAmountDueTotal.setText(String.valueOf(df.format(getTotalAmount())));
                jLabelItemsCounter.setText(String.valueOf(i+1));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (jTable1.getRowCount() < 1) {
        }
    }

    /**
     * @return the totalAmount
     */
    public double getTotalAmount() {
        return totalAmount;
    }

    /**
     * @param totalAmount the totalAmount to set
     */
    public void setTotalAmount(double totalAmount) {
        this.totalAmount = totalAmount;
    }

    /**
     * @return the payment
     */
    public static Boolean getPayment() {
        return payment;
    }

    /**
     * @param aPayment the payment to set
     */
    public static void setPayment(Boolean aPayment) {
        payment = aPayment;
    }

    /**
     * @return the cash
     */
    public static Double getCash() {
        return cash;
    }

    /**
     * @param aCash the cash to set
     */
    public static void setCash(Double aCash) {
        cash = aCash;
    }

    /**
     * @return the change
     */
    public static Double getChange() {
        return change;
    }

    /**
     * @param aChange the change to set
     */
    public static void setChange(Double aChange) {
        change = aChange;
    }

    /**
     * @return the customerNo
     */
    public static Integer getCustomerNo() {
        return customerNo;
    }

    /**
     * @param aOrderNo the customerNo to set
     */
    public static void setCustomerNo(Integer aOrderNo) {
        customerNo = aOrderNo;
    }

    private OrdersHold ordersHold = new OrdersHold();

    private void holdOrderList() {

        ArrayList<OrdersHold> ordersHoldList = new ArrayList<>();
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            OrdersHold oh = new OrdersHold();
            Integer id = Integer.parseInt(jTable1.getValueAt(i, 0).toString());
            String menu = String.valueOf(jTable1.getValueAt(i, 1).toString());
            Integer qty = Integer.parseInt(jTable1.getValueAt(i, 2).toString());
            String unitPrice = jTable1.getValueAt(i, 3).toString();
            String lineTotal = jTable1.getValueAt(i, 4).toString();
            String lineTotalUF = jTable1.getValueAt(i, 5).toString();
            String unitPriceUF = jTable1.getValueAt(i, 6).toString();
            oh.setId(id);
            oh.setQty(qty);
            oh.setMenu(menu);
            oh.setUnitPrice(unitPrice);
            oh.setLineTotal(lineTotal);
            oh.setLineTotalUF(lineTotalUF);
            oh.setUnitPriceUF(unitPriceUF);
            ordersHoldList.add(oh);
        }
        ordersHold.setOrdersHold(ordersHoldList);
    }

    /**
     * @return the ordersHold
     */
    public OrdersHold getOrdersHold() {
        return ordersHold;
    }

    /**
     * @param ordersHold the ordersHold to set
     */
    public void setOrdersHold(OrdersHold ordersHold) {
        this.ordersHold = ordersHold;
    }

    private void releaseOrderList() {
        tableModel.setRowCount(0);
        for (OrdersHold o : ordersHold.getOrdersHold()) {
            tableModel.addRow(new Object[]{o.getId(), o.getMenu(), o.getQty(), o.getUnitPrice(), o.getLineTotal(), o.getLineTotalUF(), o.getUnitPriceUF()});
        }
    }

    public JPanelCashier(String holdOrder) {
        this.setMotd(motd);
        this.validate();
        initComponents();
        new JFrameCafSys(this, holdOrder);
    }

    public void hold() {
        jButtonHold.setText("Release");
        holdOrderList();
        jButtonHold.setForeground(Color.RED);
        tableModel.setRowCount(0);
    }

    public void release() {
        releaseOrderList();
        ordersHold.setOrdersHold(null);
        jButtonHold.setText("Hold");
        jButtonHold.setForeground(Color.BLACK);
    }

    public void logIn() {
        try {
            //JButton     
            jButtonEditQty.setEnabled(false);
            jButtonRemoveQty.setEnabled(false);
            jButtonNew.setEnabled(false);
            jButtonHold.setEnabled(false);
            jButtonPayment.setEnabled(false);
            jButtonAdd.setEnabled(false);
            jButtonMinus.setEnabled(false);
            //JLabel
            jLabelAmountDueTotal.setText("");
            jLabelCash.setText("");
            jLabelChange.setText("");
            //JTable
            tableModel.setRowCount(0);
            selectCategory();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void logOut() {
        try {
            //JButton
            jButtonRemoveQty.setEnabled(false);
            jButtonEditQty.setEnabled(false);
            jButtonNew.setEnabled(false);
            jButtonHold.setEnabled(false);
            jButtonPayment.setEnabled(false);
            jButtonAdd.setEnabled(false);
            jButtonMinus.setEnabled(false);

            jLabelAmountDueTotal.setText("");
            jLabelCash.setText("");
            jLabelChange.setText("");

            tableModel.setRowCount(0);
            selectCategory();
            selectMenu();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * @return the discount
     */
    public static com.aldrin.cafsys.model.Discount getDiscount() {
        return discount;
    }

    /**
     * @param aDiscount the discount to set
     */
    public static void setDiscount(com.aldrin.cafsys.model.Discount aDiscount) {
        discount = aDiscount;
    }

    /**
     * @return the totalDiscount
     */
    public static Double getTotalDiscount() {
        return totalDiscount;
    }

    /**
     * @param aTotalDiscount the totalDiscount to set
     */
    public static void setTotalDiscount(Double aTotalDiscount) {
        totalDiscount = aTotalDiscount;
    }

    /**
     * @return the removeMenu
     */
    public static Boolean getRemoveMenu() {
        return removeMenu;
    }

    /**
     * @param aRemoveMenu the removeMenu to set
     */
    public static void setRemoveMenu(Boolean aRemoveMenu) {
        removeMenu = aRemoveMenu;
    }

    /**
     * @return the takingMeals
     */
    public static TakingMeals getTakingMeals() {
        return takingMeals;
    }

    /**
     * @param aTakingMeals the takingMeals to set
     */
    public static void setTakingMeals(TakingMeals aTakingMeals) {
        takingMeals = aTakingMeals;
    }

    /**
     * @return the tableNo
     */
    public static Integer getTableNo() {
        return tableNo;
    }

    /**
     * @param aTableNo the tableNo to set
     */
    public static void setTableNo(Integer aTableNo) {
        tableNo = aTableNo;
    }



}
